classdef mocap_GetMocapFrameResponse < robotics.ros.Message
    %mocap_GetMocapFrameResponse MATLAB implementation of mocap/mocap_GetMocapFrameResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mocap/mocap_GetMocapFrameResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '88eb9becce3c4d765d589b1c8e5c1b44' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MocapMocapFrameClass = robotics.ros.msg.internal.MessageFactory.getClassForType('mocap/mocap_frame') % Dispatch to MATLAB class for message type mocap/mocap_frame
    end
    
    properties (Dependent)
        Mf
        Ret
        Msg
    end
    
    properties (Access = protected)
        Cache = struct('Mf', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Mf', 'Msg', 'Ret'} % List of non-constant message properties
        ROSPropertyList = {'mf', 'msg', 'ret'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = mocap_GetMocapFrameResponse(msg)
            %mocap_GetMocapFrameResponse Construct the message object mocap_GetMocapFrameResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function mf = get.Mf(obj)
            %get.Mf Get the value for property Mf
            if isempty(obj.Cache.Mf)
                obj.Cache.Mf = feval(obj.MocapMocapFrameClass, obj.JavaMessage.getMf);
            end
            mf = obj.Cache.Mf;
        end
        
        function set.Mf(obj, mf)
            %set.Mf Set the value for property Mf
            validateattributes(mf, {obj.MocapMocapFrameClass}, {'nonempty', 'scalar'}, 'mocap_GetMocapFrameResponse', 'Mf');
            
            obj.JavaMessage.setMf(mf.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Mf)
                obj.Cache.Mf.setJavaObject(mf.getJavaObject);
            end
        end
        
        function ret = get.Ret(obj)
            %get.Ret Get the value for property Ret
            ret = int64(obj.JavaMessage.getRet);
        end
        
        function set.Ret(obj, ret)
            %set.Ret Set the value for property Ret
            validateattributes(ret, {'numeric'}, {'nonempty', 'scalar'}, 'mocap_GetMocapFrameResponse', 'Ret');
            
            obj.JavaMessage.setRet(ret);
        end
        
        function msg = get.Msg(obj)
            %get.Msg Get the value for property Msg
            msg = char(obj.JavaMessage.getMsg);
        end
        
        function set.Msg(obj, msg)
            %set.Msg Set the value for property Msg
            validateattributes(msg, {'char'}, {}, 'mocap_GetMocapFrameResponse', 'Msg');
            
            obj.JavaMessage.setMsg(msg);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Mf = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Ret = obj.Ret;
            cpObj.Msg = obj.Msg;
            
            % Recursively copy compound properties
            cpObj.Mf = copy(obj.Mf);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Ret = strObj.Ret;
            obj.Msg = strObj.Msg;
            obj.Mf = feval([obj.MocapMocapFrameClass '.loadobj'], strObj.Mf);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Ret = obj.Ret;
            strObj.Msg = obj.Msg;
            strObj.Mf = saveobj(obj.Mf);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mocap.mocap_GetMocapFrameResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mocap.mocap_GetMocapFrameResponse;
            obj.reload(strObj);
        end
    end
end
