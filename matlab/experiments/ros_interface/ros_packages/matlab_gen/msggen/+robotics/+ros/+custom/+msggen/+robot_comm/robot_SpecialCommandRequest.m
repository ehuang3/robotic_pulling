classdef robot_SpecialCommandRequest < robotics.ros.Message
    %robot_SpecialCommandRequest MATLAB implementation of robot_comm/robot_SpecialCommandRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'robot_comm/robot_SpecialCommandRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '35641a14d68eae4e3f43fd2e5282cc04' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Command
        Param1
        Param2
        Param3
        Param4
        Param5
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Command', 'Param1', 'Param2', 'Param3', 'Param4', 'Param5'} % List of non-constant message properties
        ROSPropertyList = {'command', 'param1', 'param2', 'param3', 'param4', 'param5'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = robot_SpecialCommandRequest(msg)
            %robot_SpecialCommandRequest Construct the message object robot_SpecialCommandRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function command = get.Command(obj)
            %get.Command Get the value for property Command
            command = int64(obj.JavaMessage.getCommand);
        end
        
        function set.Command(obj, command)
            %set.Command Set the value for property Command
            validateattributes(command, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SpecialCommandRequest', 'Command');
            
            obj.JavaMessage.setCommand(command);
        end
        
        function param1 = get.Param1(obj)
            %get.Param1 Get the value for property Param1
            param1 = double(obj.JavaMessage.getParam1);
        end
        
        function set.Param1(obj, param1)
            %set.Param1 Set the value for property Param1
            validateattributes(param1, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SpecialCommandRequest', 'Param1');
            
            obj.JavaMessage.setParam1(param1);
        end
        
        function param2 = get.Param2(obj)
            %get.Param2 Get the value for property Param2
            param2 = double(obj.JavaMessage.getParam2);
        end
        
        function set.Param2(obj, param2)
            %set.Param2 Set the value for property Param2
            validateattributes(param2, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SpecialCommandRequest', 'Param2');
            
            obj.JavaMessage.setParam2(param2);
        end
        
        function param3 = get.Param3(obj)
            %get.Param3 Get the value for property Param3
            param3 = double(obj.JavaMessage.getParam3);
        end
        
        function set.Param3(obj, param3)
            %set.Param3 Set the value for property Param3
            validateattributes(param3, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SpecialCommandRequest', 'Param3');
            
            obj.JavaMessage.setParam3(param3);
        end
        
        function param4 = get.Param4(obj)
            %get.Param4 Get the value for property Param4
            param4 = double(obj.JavaMessage.getParam4);
        end
        
        function set.Param4(obj, param4)
            %set.Param4 Set the value for property Param4
            validateattributes(param4, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SpecialCommandRequest', 'Param4');
            
            obj.JavaMessage.setParam4(param4);
        end
        
        function param5 = get.Param5(obj)
            %get.Param5 Get the value for property Param5
            param5 = double(obj.JavaMessage.getParam5);
        end
        
        function set.Param5(obj, param5)
            %set.Param5 Set the value for property Param5
            validateattributes(param5, {'numeric'}, {'nonempty', 'scalar'}, 'robot_SpecialCommandRequest', 'Param5');
            
            obj.JavaMessage.setParam5(param5);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Command = obj.Command;
            cpObj.Param1 = obj.Param1;
            cpObj.Param2 = obj.Param2;
            cpObj.Param3 = obj.Param3;
            cpObj.Param4 = obj.Param4;
            cpObj.Param5 = obj.Param5;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Command = strObj.Command;
            obj.Param1 = strObj.Param1;
            obj.Param2 = strObj.Param2;
            obj.Param3 = strObj.Param3;
            obj.Param4 = strObj.Param4;
            obj.Param5 = strObj.Param5;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Command = obj.Command;
            strObj.Param1 = obj.Param1;
            strObj.Param2 = obj.Param2;
            strObj.Param3 = obj.Param3;
            strObj.Param4 = obj.Param4;
            strObj.Param5 = obj.Param5;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.robot_comm.robot_SpecialCommandRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.robot_comm.robot_SpecialCommandRequest;
            obj.reload(strObj);
        end
    end
end
