classdef mocap_frame < robotics.ros.Message
    %mocap_frame MATLAB implementation of mocap/mocap_frame
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mocap/mocap_frame' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '1a6d089936177be68712dd54f291892c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseArrayClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/PoseArray') % Dispatch to MATLAB class for message type geometry_msgs/PoseArray
        MocapMarkerSetClass = robotics.ros.msg.internal.MessageFactory.getClassForType('mocap/marker_set') % Dispatch to MATLAB class for message type mocap/marker_set
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Number
        BodyPoses
        UidMarkers
        IdMarkerSets
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'BodyPoses', [], 'UidMarkers', [], 'IdMarkerSets', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BodyPoses', 'Header', 'IdMarkerSets', 'Number', 'UidMarkers'} % List of non-constant message properties
        ROSPropertyList = {'body_poses', 'header', 'id_marker_sets', 'number', 'uid_markers'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = mocap_frame(msg)
            %mocap_frame Construct the message object mocap_frame
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'mocap_frame', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function number = get.Number(obj)
            %get.Number Get the value for property Number
            number = int64(obj.JavaMessage.getNumber);
        end
        
        function set.Number(obj, number)
            %set.Number Set the value for property Number
            validateattributes(number, {'numeric'}, {'nonempty', 'scalar'}, 'mocap_frame', 'Number');
            
            obj.JavaMessage.setNumber(number);
        end
        
        function bodyposes = get.BodyPoses(obj)
            %get.BodyPoses Get the value for property BodyPoses
            if isempty(obj.Cache.BodyPoses)
                obj.Cache.BodyPoses = feval(obj.GeometryMsgsPoseArrayClass, obj.JavaMessage.getBodyPoses);
            end
            bodyposes = obj.Cache.BodyPoses;
        end
        
        function set.BodyPoses(obj, bodyposes)
            %set.BodyPoses Set the value for property BodyPoses
            validateattributes(bodyposes, {obj.GeometryMsgsPoseArrayClass}, {'nonempty', 'scalar'}, 'mocap_frame', 'BodyPoses');
            
            obj.JavaMessage.setBodyPoses(bodyposes.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.BodyPoses)
                obj.Cache.BodyPoses.setJavaObject(bodyposes.getJavaObject);
            end
        end
        
        function uidmarkers = get.UidMarkers(obj)
            %get.UidMarkers Get the value for property UidMarkers
            if isempty(obj.Cache.UidMarkers)
                obj.Cache.UidMarkers = feval(obj.MocapMarkerSetClass, obj.JavaMessage.getUidMarkers);
            end
            uidmarkers = obj.Cache.UidMarkers;
        end
        
        function set.UidMarkers(obj, uidmarkers)
            %set.UidMarkers Set the value for property UidMarkers
            validateattributes(uidmarkers, {obj.MocapMarkerSetClass}, {'nonempty', 'scalar'}, 'mocap_frame', 'UidMarkers');
            
            obj.JavaMessage.setUidMarkers(uidmarkers.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.UidMarkers)
                obj.Cache.UidMarkers.setJavaObject(uidmarkers.getJavaObject);
            end
        end
        
        function idmarkersets = get.IdMarkerSets(obj)
            %get.IdMarkerSets Get the value for property IdMarkerSets
            if isempty(obj.Cache.IdMarkerSets)
                javaArray = obj.JavaMessage.getIdMarkerSets;
                array = obj.readJavaArray(javaArray, obj.MocapMarkerSetClass);
                obj.Cache.IdMarkerSets = feval(obj.MocapMarkerSetClass, array);
            end
            idmarkersets = obj.Cache.IdMarkerSets;
        end
        
        function set.IdMarkerSets(obj, idmarkersets)
            %set.IdMarkerSets Set the value for property IdMarkerSets
            if ~isvector(idmarkersets) && isempty(idmarkersets)
                % Allow empty [] input
                idmarkersets = feval([obj.MocapMarkerSetClass '.empty'], 0, 1);
            end
            
            validateattributes(idmarkersets, {obj.MocapMarkerSetClass}, {'vector'}, 'mocap_frame', 'IdMarkerSets');
            
            javaArray = obj.JavaMessage.getIdMarkerSets;
            array = obj.writeJavaArray(idmarkersets, javaArray, obj.MocapMarkerSetClass);
            obj.JavaMessage.setIdMarkerSets(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.IdMarkerSets)
                obj.Cache.IdMarkerSets = [];
                obj.Cache.IdMarkerSets = obj.IdMarkerSets;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.BodyPoses = [];
            obj.Cache.UidMarkers = [];
            obj.Cache.IdMarkerSets = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Number = obj.Number;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.BodyPoses = copy(obj.BodyPoses);
            cpObj.UidMarkers = copy(obj.UidMarkers);
            cpObj.IdMarkerSets = copy(obj.IdMarkerSets);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Number = strObj.Number;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.BodyPoses = feval([obj.GeometryMsgsPoseArrayClass '.loadobj'], strObj.BodyPoses);
            obj.UidMarkers = feval([obj.MocapMarkerSetClass '.loadobj'], strObj.UidMarkers);
            IdMarkerSetsCell = arrayfun(@(x) feval([obj.MocapMarkerSetClass '.loadobj'], x), strObj.IdMarkerSets, 'UniformOutput', false);
            obj.IdMarkerSets = vertcat(IdMarkerSetsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Number = obj.Number;
            strObj.Header = saveobj(obj.Header);
            strObj.BodyPoses = saveobj(obj.BodyPoses);
            strObj.UidMarkers = saveobj(obj.UidMarkers);
            strObj.IdMarkerSets = arrayfun(@(x) saveobj(x), obj.IdMarkerSets);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mocap.mocap_frame.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mocap.mocap_frame;
            obj.reload(strObj);
        end
    end
end
